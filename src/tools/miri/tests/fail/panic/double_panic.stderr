thread 'main' panicked at 'first', $DIR/double_panic.rs:LL:CC
note: run with `CRABLANG_BACKTRACE=1` environment variable to display a backtrace
thread 'main' panicked at 'second', $DIR/double_panic.rs:LL:CC
stack backtrace:
   0: std::backtrace_rs::backtrace::miri::trace_unsynchronized
 at CRABLANGLIB/std/src/../../backtrace/src/backtrace/miri.rs:LL:CC
   1: std::backtrace_rs::backtrace::miri::trace
 at CRABLANGLIB/std/src/../../backtrace/src/backtrace/miri.rs:LL:CC
   2: std::backtrace_rs::backtrace::trace_unsynchronized
 at CRABLANGLIB/std/src/../../backtrace/src/backtrace/mod.rs:LL:CC
   3: std::sys_common::backtrace::_print_fmt
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
   4: <std::sys_common::backtrace::_print::DisplayBacktrace as std::fmt::Display>::fmt
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
   5: std::fmt::write
 at CRABLANGLIB/core/src/fmt/mod.rs:LL:CC
   6: <std::sys::PLATFORM::stdio::Stderr as std::io::Write>::write_fmt
 at CRABLANGLIB/std/src/io/mod.rs:LL:CC
   7: std::sys_common::backtrace::_print
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
   8: std::sys_common::backtrace::print
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
   9: std::panicking::default_hook::{closure#1}
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  10: std::panicking::default_hook
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  11: std::panicking::crablang_panic_with_hook
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  12: std::rt::begin_panic::{closure#0}
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  13: std::sys_common::backtrace::__crablang_end_short_backtrace
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
  14: std::rt::begin_panic
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  15: <Foo as std::ops::Drop>::drop
 at $DIR/double_panic.rs:LL:CC
  16: std::ptr::drop_in_place - shim(Some(Foo))
 at CRABLANGLIB/core/src/ptr/mod.rs:LL:CC
  17: main
 at $DIR/double_panic.rs:LL:CC
  18: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())
 at CRABLANGLIB/core/src/ops/function.rs:LL:CC
  19: std::sys_common::backtrace::__crablang_begin_short_backtrace
 at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
  20: std::rt::lang_start::{closure#0}
 at CRABLANGLIB/std/src/rt.rs:LL:CC
  21: std::ops::function::impls::call_once
 at CRABLANGLIB/core/src/ops/function.rs:LL:CC
  22: std::panicking::r#try::do_call
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  23: std::panicking::r#try
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  24: std::panic::catch_unwind
 at CRABLANGLIB/std/src/panic.rs:LL:CC
  25: std::rt::lang_start_internal::{closure#2}
 at CRABLANGLIB/std/src/rt.rs:LL:CC
  26: std::panicking::r#try::do_call
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  27: std::panicking::r#try
 at CRABLANGLIB/std/src/panicking.rs:LL:CC
  28: std::panic::catch_unwind
 at CRABLANGLIB/std/src/panic.rs:LL:CC
  29: std::rt::lang_start_internal
 at CRABLANGLIB/std/src/rt.rs:LL:CC
  30: std::rt::lang_start
 at CRABLANGLIB/std/src/rt.rs:LL:CC
thread panicked while panicking. aborting.
error: abnormal termination: the program aborted execution
  --> CRABLANGLIB/std/src/sys/PLATFORM/mod.rs:LL:CC
   |
LL |     ABORT();
   | ^ the program aborted execution
   |
   = note: inside `std::sys::PLATFORM::abort_internal` at CRABLANGLIB/std/src/sys/PLATFORM/mod.rs:LL:CC
   = note: inside `std::panicking::crablang_panic_with_hook` at CRABLANGLIB/std/src/panicking.rs:LL:CC
   = note: inside closure at CRABLANGLIB/std/src/panicking.rs:LL:CC
   = note: inside `std::sys_common::backtrace::__crablang_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at CRABLANGLIB/std/src/sys_common/backtrace.rs:LL:CC
note: inside `<Foo as std::ops::Drop>::drop`
  --> $DIR/double_panic.rs:LL:CC
   |
LL |         panic!("second");
   | ^
   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at CRABLANGLIB/core/src/ptr/mod.rs:LL:CC
note: inside `main`
  --> $DIR/double_panic.rs:LL:CC
   |
LL | }
   | ^
   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to previous error

