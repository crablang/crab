error[E0080]: evaluation of constant value failed
  --> $DIR/const_refers_to_static.rs:9:5
   |
LL |     FOO.fetch_add(1, Ordering::Relaxed)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`

error[E0080]: evaluation of constant value failed
  --> $DIR/const_refers_to_static.rs:14:14
   |
LL |     unsafe { *(&FOO as *const _ as *const usize) }
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static

error[E0080]: evaluation of constant value failed
  --> $DIR/const_refers_to_static.rs:18:32
   |
LL | const READ_MUT: u32 = unsafe { MUTABLE };
   |                                ^^^^^^^ constant accesses static

error[E0080]: it is undefined behavior to use this value
  --> $DIR/const_refers_to_static.rs:20:1
   |
LL | const REF_INTERIOR_MUT: &usize = {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the crablangc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: 8, align: 8) {
               ╾───────alloc4────────╼                         │ ╾──────╼
           }

error[E0080]: it is undefined behavior to use this value
  --> $DIR/const_refers_to_static.rs:27:1
   |
LL | const READ_IMMUT: &usize = {
   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the crablangc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: 8, align: 8) {
               ╾───────alloc5────────╼                         │ ╾──────╼
           }

warning: skipping const checks
   |
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:9:5
   |
LL |     FOO.fetch_add(1, Ordering::Relaxed)
   |     ^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:9:5
   |
LL |     FOO.fetch_add(1, Ordering::Relaxed)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:14:17
   |
LL |     unsafe { *(&FOO as *const _ as *const usize) }
   |                 ^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:18:32
   |
LL | const READ_MUT: u32 = unsafe { MUTABLE };
   |                                ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:18:32
   |
LL | const READ_MUT: u32 = unsafe { MUTABLE };
   |                                ^^^^^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:23:18
   |
LL |     unsafe { &*(&FOO as *const _ as *const usize) }
   |                  ^^^
help: skipping check that does not even have a feature gate
  --> $DIR/const_refers_to_static.rs:30:6
   |
LL |     &FOO
   |      ^^^

error: aborting due to 5 previous errors; 1 warning emitted

For more information about this error, try `crablangc --explain E0080`.
