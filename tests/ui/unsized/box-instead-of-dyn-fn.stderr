error[E0308]: `if` and `else` have incompatible types
  --> $DIR/box-instead-of-dyn-fn.rs:10:9
   |
LL | /     if a % 2 == 0 {
LL | |         move || println!("{a}")
   | |         -----------------------
   | |         |
   | |         the expected closure
   | |         expected because of this
LL | |     } else {
LL | |         Box::new(move || println!("{}", b))
   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found `Box<[closure@box-instead-of-dyn-fn.rs:10:18]>`
LL | |
LL | |     }
   | |_____- `if` and `else` have incompatible types
   |
   = note: expected closure `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:16]`
               found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:25]>`

error[E0746]: return type cannot have an unboxed trait object
  --> $DIR/box-instead-of-dyn-fn.rs:5:56
   |
LL | fn print_on_or_the_other<'a>(a: i32, b: &'a String) -> dyn Fn() + 'a {
   |                                                        ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = note: for information on trait objects, see <https://doc.crablang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>
   = note: if all the returned values were of the same type you could use `impl Fn() + 'a` as the return type
   = note: for information on `impl Trait`, see <https://doc.crablang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>
   = note: you can create a new `enum` with a variant for each returned type
help: return a boxed trait object instead
   |
LL | fn print_on_or_the_other<'a>(a: i32, b: &'a String) -> Box<dyn Fn() + 'a> {
   |                                                        ++++             +
help: ... and box this value
   |
LL |         Box::new(move || println!("{a}"))
   |         +++++++++                       +

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0308, E0746.
For more information about an error, try `crablangc --explain E0308`.
