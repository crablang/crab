error: the trait `X` cannot be made into an object
  --> $DIR/issue-50781.rs:6:8
   |
LL |     fn foo(&self) where Self: Trait;
   |        ^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #51443 <https://github.com/crablang/crablang/issues/51443>
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.crablang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-50781.rs:6:8
   |
LL | trait X {
   |       - this trait cannot be made into an object...
LL |     fn foo(&self) where Self: Trait;
   |        ^^^ ...because method `foo` references the `Self` type in its `where` clause
   = help: consider moving `foo` to another trait
note: the lint level is defined here
  --> $DIR/issue-50781.rs:1:9
   |
LL | #![deny(where_clauses_object_safety)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

