error: generator cannot be sent between threads safely
  --> $DIR/issue-68112.rs:43:5
   |
LL |     require_send(send_gen);
   |     ^^^^^^^^^^^^ generator is not `Send`
   |
   = help: the trait `Sync` is not implemented for `RefCell<i32>`
   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: generator is not `Send` as this value is used across a yield
  --> $DIR/issue-68112.rs:39:9
   |
LL |         let _non_send_gen = make_non_send_generator();
   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`
LL |
LL |         yield;
   |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later
note: required by a bound in `require_send`
  --> $DIR/issue-68112.rs:25:25
   |
LL | fn require_send(_: impl Send) {}
   |                         ^^^^ required by this bound in `require_send`

error[E0277]: `RefCell<i32>` cannot be shared between threads safely
  --> $DIR/issue-68112.rs:67:5
   |
LL |     require_send(send_gen);
   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely
   |
   = help: the trait `Sync` is not implemented for `RefCell<i32>`
   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
   = note: required for `Arc<RefCell<i32>>` to implement `Send`
note: required because it's used within this generator
  --> $DIR/issue-68112.rs:52:5
   |
LL |     || {
   |     ^^
note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`
  --> $DIR/issue-68112.rs:49:30
   |
LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`
  --> $DIR/issue-68112.rs:57:34
   |
LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`
note: required because it's used within this generator
  --> $DIR/issue-68112.rs:63:20
   |
LL |     let send_gen = || {
   |                    ^^
note: required by a bound in `require_send`
  --> $DIR/issue-68112.rs:25:25
   |
LL | fn require_send(_: impl Send) {}
   |                         ^^^^ required by this bound in `require_send`

error: aborting due to 2 previous errors

For more information about this error, try `crablangc --explain E0277`.
