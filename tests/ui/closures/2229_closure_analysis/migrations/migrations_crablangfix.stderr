error: changes to closure capture in CrabLang 2021 will affect drop order
  --> $DIR/migrations_crablangfix.rs:19:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in CrabLang 2018, this closure captures all of `t`, but in CrabLang 2021, it will only capture `t.0`
...
LL | }
   | - in CrabLang 2018, `t` is dropped here, but in CrabLang 2021, only `t.0` will be dropped here as part of the closure
   |
   = note: for more information, see <https://doc.crablang.org/nightly/edition-guide/crablang-2021/disjoint-capture-in-closures.html>
note: the lint level is defined here
  --> $DIR/migrations_crablangfix.rs:2:9
   |
LL | #![deny(crablang_2021_incompatible_closure_captures)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: add a dummy let to cause `t` to be fully captured
   |
LL ~     let c = || {
LL +         let _ = &t;
   |

error: changes to closure capture in CrabLang 2021 will affect drop order
  --> $DIR/migrations_crablangfix.rs:33:13
   |
LL |     let c = || t.0;
   |             ^^ --- in CrabLang 2018, this closure captures all of `t`, but in CrabLang 2021, it will only capture `t.0`
...
LL | }
   | - in CrabLang 2018, `t` is dropped here, but in CrabLang 2021, only `t.0` will be dropped here as part of the closure
   |
   = note: for more information, see <https://doc.crablang.org/nightly/edition-guide/crablang-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t` to be fully captured
   |
LL |     let c = || { let _ = &t; t.0 };
   |                +++++++++++++     +

error: aborting due to 2 previous errors

