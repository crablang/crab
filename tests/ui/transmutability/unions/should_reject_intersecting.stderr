error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.
  --> $DIR/should_reject_intersecting.rs:36:34
   |
LL |     assert::is_transmutable::<A, B>();
   |                                  ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.
   |
   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `B`
note: required by a bound in `is_transmutable`
  --> $DIR/should_reject_intersecting.rs:14:14
   |
LL |     pub fn is_transmutable<Src, Dst>()
   |            --------------- required by a bound in this function
LL |     where
LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`

error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.
  --> $DIR/should_reject_intersecting.rs:37:34
   |
LL |     assert::is_transmutable::<B, A>();
   |                                  ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.
   |
   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `A`
note: required by a bound in `is_transmutable`
  --> $DIR/should_reject_intersecting.rs:14:14
   |
LL |     pub fn is_transmutable<Src, Dst>()
   |            --------------- required by a bound in this function
LL |     where
LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`

error: aborting due to 2 previous errors

For more information about this error, try `crablangc --explain E0277`.
