error[E0277]: the type `&mut Context<'_>` may not be safely transferred across an unwind boundary
  --> $DIR/async-is-unwindsafe.rs:12:19
   |
LL |       is_unwindsafe(async {
   |  ___________________^
LL | |
LL | |         use std::ptr::null;
LL | |         use std::task::{Context, RawWaker, RawWakerVTable, Waker};
...  |
LL | |         drop(cx_ref);
LL | |     });
   | |     ^
   | |     |
   | |_____`&mut Context<'_>` may not be safely transferred across an unwind boundary
   |       within this `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`
   |
   = help: within `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`, the trait `UnwindSafe` is not implemented for `&mut Context<'_>`
   = note: `UnwindSafe` is implemented for `&std::task::Context<'_>`, but not for `&mut std::task::Context<'_>`
note: future does not implement `UnwindSafe` as this value is used across an await
  --> $DIR/async-is-unwindsafe.rs:25:17
   |
LL |         let cx_ref = &mut cx;
   |             ------ has type `&mut Context<'_>` which does not implement `UnwindSafe`
LL |
LL |         async {}.await; // this needs an inner await point
   |                 ^^^^^^ await occurs here, with `cx_ref` maybe used later
...
LL |     });
   |     - `cx_ref` is later dropped here
note: required by a bound in `is_unwindsafe`
  --> $DIR/async-is-unwindsafe.rs:3:26
   |
LL | fn is_unwindsafe(_: impl std::panic::UnwindSafe) {}
   |                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_unwindsafe`

error: aborting due to previous error

For more information about this error, try `crablangc --explain E0277`.
