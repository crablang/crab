const PARSED = [
    {
        query: 'fn:foo',
        elems: [{
            name: "foo",
            fullPath: ["foo"],
            pathWithoutLast: [],
            pathLast: "foo",
            generics: [],
            typeFilter: 5,
        }],
        foundElems: 1,
        original: "fn:foo",
        returned: [],
        userQuery: "fn:foo",
        error: null,
    },
    {
        query: 'enum : foo',
        elems: [{
            name: "foo",
            fullPath: ["foo"],
            pathWithoutLast: [],
            pathLast: "foo",
            generics: [],
            typeFilter: 4,
        }],
        foundElems: 1,
        original: "enum : foo",
        returned: [],
        userQuery: "enum : foo",
        error: null,
    },
    {
        query: 'macro<f>:foo',
        elems: [],
        foundElems: 0,
        original: "macro<f>:foo",
        returned: [],
        userQuery: "macro<f>:foo",
        error: "Unexpected `<` in type filter (before `:`)",
    },
    {
        query: 'macro!',
        elems: [{
            name: "macro",
            fullPath: ["macro"],
            pathWithoutLast: [],
            pathLast: "macro",
            generics: [],
            typeFilter: 14,
        }],
        foundElems: 1,
        original: "macro!",
        returned: [],
        userQuery: "macro!",
        error: null,
    },
    {
        query: 'macro:mac!',
        elems: [{
            name: "mac",
            fullPath: ["mac"],
            pathWithoutLast: [],
            pathLast: "mac",
            generics: [],
            typeFilter: 14,
        }],
        foundElems: 1,
        original: "macro:mac!",
        returned: [],
        userQuery: "macro:mac!",
        error: null,
    },
    {
        query: 'a::mac!',
        elems: [{
            name: "a::mac",
            fullPath: ["a", "mac"],
            pathWithoutLast: ["a"],
            pathLast: "mac",
            generics: [],
            typeFilter: 14,
        }],
        foundElems: 1,
        original: "a::mac!",
        returned: [],
        userQuery: "a::mac!",
        error: null,
    },
    {
        query: '-> fn:foo',
        elems: [],
        foundElems: 1,
        original: "-> fn:foo",
        returned: [{
            name: "foo",
            fullPath: ["foo"],
            pathWithoutLast: [],
            pathLast: "foo",
            generics: [],
            typeFilter: 5,
        }],
        userQuery: "-> fn:foo",
        error: null,
    },
    {
        query: '-> fn:foo<fn:bar>',
        elems: [],
        foundElems: 1,
        original: "-> fn:foo<fn:bar>",
        returned: [{
            name: "foo",
            fullPath: ["foo"],
            pathWithoutLast: [],
            pathLast: "foo",
            generics: [
                {
                    name: "bar",
                    fullPath: ["bar"],
                    pathWithoutLast: [],
                    pathLast: "bar",
                    generics: [],
                    typeFilter: 5,
                }
            ],
            typeFilter: 5,
        }],
        userQuery: "-> fn:foo<fn:bar>",
        error: null,
    },
    {
        query: '-> fn:foo<fn:bar, enum : baz::fuzz>',
        elems: [],
        foundElems: 1,
        original: "-> fn:foo<fn:bar, enum : baz::fuzz>",
        returned: [{
            name: "foo",
            fullPath: ["foo"],
            pathWithoutLast: [],
            pathLast: "foo",
            generics: [
                {
                    name: "bar",
                    fullPath: ["bar"],
                    pathWithoutLast: [],
                    pathLast: "bar",
                    generics: [],
                    typeFilter: 5,
                },
                {
                    name: "baz::fuzz",
                    fullPath: ["baz", "fuzz"],
                    pathWithoutLast: ["baz"],
                    pathLast: "fuzz",
                    generics: [],
                    typeFilter: 4,
                },
            ],
            typeFilter: 5,
        }],
        userQuery: "-> fn:foo<fn:bar, enum : baz::fuzz>",
        error: null,
    },
];
