error: unsupported type attribute for diagnostic derive enum
  --> $DIR/diagnostic-derive.rs:41:1
   |
LL | #[diag(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:44:5
   |
LL |     Foo,
   |     ^^^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:46:5
   |
LL |     Bar,
   |     ^^^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: expected parentheses: #[diag(...)]
  --> $DIR/diagnostic-derive.rs:52:8
   |
LL | #[diag = "E0123"]
   |        ^

error: `#[nonsense(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:57:1
   |
LL | #[nonsense(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:57:1
   |
LL | / #[nonsense(no_crate_example, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct InvalidStructAttr {}
   | |___________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:64:1
   |
LL | / #[diag("E0123")]
LL | |
LL | | struct InvalidLitNestedAttr {}
   | |______________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: diagnostic slug must be the first argument
  --> $DIR/diagnostic-derive.rs:74:16
   |
LL | #[diag(nonsense("foo"), code = "E0123", slug = "foo")]
   |                ^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:74:1
   |
LL | / #[diag(nonsense("foo"), code = "E0123", slug = "foo")]
LL | |
LL | |
LL | | struct InvalidNestedStructAttr1 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: unknown argument
  --> $DIR/diagnostic-derive.rs:80:8
   |
LL | #[diag(nonsense = "...", code = "E0123", slug = "foo")]
   |        ^^^^^^^^
   |
   = note: only the `code` parameter is valid after the slug

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:80:1
   |
LL | / #[diag(nonsense = "...", code = "E0123", slug = "foo")]
LL | |
LL | |
LL | | struct InvalidNestedStructAttr2 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: unknown argument
  --> $DIR/diagnostic-derive.rs:86:8
   |
LL | #[diag(nonsense = 4, code = "E0123", slug = "foo")]
   |        ^^^^^^^^
   |
   = note: only the `code` parameter is valid after the slug

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:86:1
   |
LL | / #[diag(nonsense = 4, code = "E0123", slug = "foo")]
LL | |
LL | |
LL | | struct InvalidNestedStructAttr3 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: unknown argument
  --> $DIR/diagnostic-derive.rs:92:42
   |
LL | #[diag(no_crate_example, code = "E0123", slug = "foo")]
   |                                          ^^^^
   |
   = note: only the `code` parameter is valid after the slug

error: `#[suggestion = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:99:5
   |
LL |     #[suggestion = "bar"]
   |     ^^^^^^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:106:8
   |
LL | #[diag(no_crate_example, code = "E0456")]
   |        ^^^^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:105:8
   |
LL | #[diag(no_crate_example, code = "E0123")]
   |        ^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:106:26
   |
LL | #[diag(no_crate_example, code = "E0456")]
   |                          ^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:105:26
   |
LL | #[diag(no_crate_example, code = "E0123")]
   |                          ^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:112:42
   |
LL | #[diag(no_crate_example, code = "E0456", code = "E0457")]
   |                                          ^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:112:26
   |
LL | #[diag(no_crate_example, code = "E0456", code = "E0457")]
   |                          ^^^^

error: diagnostic slug must be the first argument
  --> $DIR/diagnostic-derive.rs:117:43
   |
LL | #[diag(no_crate_example, no_crate::example, code = "E0456")]
   |                                           ^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:122:1
   |
LL | struct KindNotProvided {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:125:1
   |
LL | / #[diag(code = "E0456")]
LL | |
LL | | struct SlugNotProvided {}
   | |_________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:136:5
   |
LL |     #[primary_span]
   |     ^^^^^^^^^^^^^^^

error: `#[nonsense]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:144:5
   |
LL |     #[nonsense]
   |     ^^^^^^^^^^^

error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:161:5
   |
LL |     #[label(no_crate_label)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: `name` doesn't refer to a field on this type
  --> $DIR/diagnostic-derive.rs:169:46
   |
LL |     #[suggestion(no_crate_suggestion, code = "{name}")]
   |                                              ^^^^^^^^

error: invalid format string: expected `'}'` but string was terminated
  --> $DIR/diagnostic-derive.rs:174:10
   |
LL | #[derive(Diagnostic)]
   |          ^^^^^^^^^^ expected `'}'` in format string
   |
   = note: if you intended to print `{`, you can escape it using `{{`
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error: invalid format string: unmatched `}` found
  --> $DIR/diagnostic-derive.rs:184:10
   |
LL | #[derive(Diagnostic)]
   |          ^^^^^^^^^^ unmatched `}` in format string
   |
   = note: if you intended to print `}`, you can escape it using `}}`
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:204:5
   |
LL |     #[label(no_crate_label)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:223:5
   |
LL |     #[suggestion(no_crate_suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: invalid nested attribute
  --> $DIR/diagnostic-derive.rs:231:18
   |
LL |     #[suggestion(nonsense = "bar")]
   |                  ^^^^^^^^
   |
   = help: only `style`, `code` and `applicability` are valid nested attributes

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:231:5
   |
LL |     #[suggestion(nonsense = "bar")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: invalid nested attribute
  --> $DIR/diagnostic-derive.rs:240:18
   |
LL |     #[suggestion(msg = "bar")]
   |                  ^^^
   |
   = help: only `style`, `code` and `applicability` are valid nested attributes

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:240:5
   |
LL |     #[suggestion(msg = "bar")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: wrong field type for suggestion
  --> $DIR/diagnostic-derive.rs:263:5
   |
LL | /     #[suggestion(no_crate_suggestion, code = "This is suggested code")]
LL | |
LL | |     suggestion: Applicability,
   | |_____________________________^
   |
   = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:279:24
   |
LL |     suggestion: (Span, Span, Applicability),
   |                        ^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:279:18
   |
LL |     suggestion: (Span, Span, Applicability),
   |                  ^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:287:33
   |
LL |     suggestion: (Applicability, Applicability, Span),
   |                                 ^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:287:18
   |
LL |     suggestion: (Applicability, Applicability, Span),
   |                  ^^^^^^^^^^^^^

error: `#[label = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:294:5
   |
LL |     #[label = "bar"]
   |     ^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:445:5
   |
LL |     #[suggestion(no_crate_suggestion, code = "...", applicability = "maybe-incorrect")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:447:24
   |
LL |     suggestion: (Span, Applicability),
   |                        ^^^^^^^^^^^^^

error: invalid applicability
  --> $DIR/diagnostic-derive.rs:453:69
   |
LL |     #[suggestion(no_crate_suggestion, code = "...", applicability = "batman")]
   |                                                                     ^^^^^^^^

error: the `#[help(...)]` attribute can only be applied to fields of type `Span`, `MultiSpan`, `bool` or `()`
  --> $DIR/diagnostic-derive.rs:520:5
   |
LL |     #[help(no_crate_help)]
   |     ^^^^^^^^^^^^^^^^^^^^^^

error: a diagnostic slug must be the first argument to the attribute
  --> $DIR/diagnostic-derive.rs:529:32
   |
LL |     #[label(no_crate_label, foo)]
   |                                ^

error: invalid nested attribute
  --> $DIR/diagnostic-derive.rs:537:29
   |
LL |     #[label(no_crate_label, foo = "...")]
   |                             ^^^

error: invalid nested attribute
  --> $DIR/diagnostic-derive.rs:545:29
   |
LL |     #[label(no_crate_label, foo("..."))]
   |                             ^^^

error: `#[primary_span]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:557:5
   |
LL |     #[primary_span]
   |     ^^^^^^^^^^^^^^^
   |
   = help: the `primary_span` field attribute is not valid for lint diagnostics

error: `#[error(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:577:1
   |
LL | #[error(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:577:1
   |
LL | / #[error(no_crate_example, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct ErrorAttribute {}
   | |________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: `#[warn_(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:584:1
   |
LL | #[warn_(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:584:1
   |
LL | / #[warn_(no_crate_example, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct WarnAttribute {}
   | |_______________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: `#[lint(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:591:1
   |
LL | #[lint(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:591:1
   |
LL | / #[lint(no_crate_example, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct LintAttributeOnSessionDiag {}
   | |____________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`

error: `#[lint(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:598:1
   |
LL | #[lint(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[lint(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:598:1
   |
LL | #[lint(no_crate_example, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:598:1
   |
LL | / #[lint(no_crate_example, code = "E0123")]
LL | |
LL | |
LL | |
LL | |
LL | | struct LintAttributeOnLintDiag {}
   | |_________________________________^
   |
   = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:608:53
   |
LL |     #[suggestion(no_crate_suggestion, code = "...", code = ",,,")]
   |                                                     ^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:608:39
   |
LL |     #[suggestion(no_crate_suggestion, code = "...", code = ",,,")]
   |                                       ^^^^

error: wrong types for suggestion
  --> $DIR/diagnostic-derive.rs:617:24
   |
LL |     suggestion: (Span, usize),
   |                        ^^^^^
   |
   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`

error: wrong types for suggestion
  --> $DIR/diagnostic-derive.rs:625:17
   |
LL |     suggestion: (Span,),
   |                 ^^^^^^^
   |
   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:632:5
   |
LL |     #[suggestion(no_crate_suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[multipart_suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:639:1
   |
LL | #[multipart_suggestion(no_crate_suggestion)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider creating a `Subdiagnostic` instead

error: `#[multipart_suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:646:5
   |
LL |     #[multipart_suggestion(no_crate_suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider creating a `Subdiagnostic` instead

error: unexpected end of input, unexpected token in nested attribute, expected ident
  --> $DIR/diagnostic-derive.rs:642:24
   |
LL | #[multipart_suggestion()]
   |                        ^

error: `#[suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:654:1
   |
LL | #[suggestion(no_crate_suggestion, code = "...")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: `#[label]` and `#[suggestion]` can only be applied to fields

error: `#[label]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:663:1
   |
LL | #[label]
   | ^^^^^^^^
   |
   = help: `#[label]` and `#[suggestion]` can only be applied to fields

error: `eager` is the only supported nested attribute for `subdiagnostic`
  --> $DIR/diagnostic-derive.rs:697:7
   |
LL |     #[subdiagnostic(bad)]
   |       ^^^^^^^^^^^^^^^^^^

error: `#[subdiagnostic = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:705:5
   |
LL |     #[subdiagnostic = "bad"]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

error: `eager` is the only supported nested attribute for `subdiagnostic`
  --> $DIR/diagnostic-derive.rs:713:7
   |
LL |     #[subdiagnostic(bad, bad)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^

error: `eager` is the only supported nested attribute for `subdiagnostic`
  --> $DIR/diagnostic-derive.rs:721:7
   |
LL |     #[subdiagnostic("bad")]
   |       ^^^^^^^^^^^^^^^^^^^^

error: `#[subdiagnostic(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:729:5
   |
LL |     #[subdiagnostic(eager)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: eager subdiagnostics are not supported on lints

error: expected at least one string literal for `code(...)`
  --> $DIR/diagnostic-derive.rs:787:23
   |
LL |     #[suggestion(code())]
   |                       ^

error: `code(...)` must contain only string literals
  --> $DIR/diagnostic-derive.rs:795:23
   |
LL |     #[suggestion(code(foo))]
   |                       ^^^

error: unexpected token
  --> $DIR/diagnostic-derive.rs:795:23
   |
LL |     #[suggestion(code(foo))]
   |                       ^^^

error: expected string literal
  --> $DIR/diagnostic-derive.rs:804:25
   |
LL |     #[suggestion(code = 3)]
   |                         ^

error: `#[suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:819:5
   |
LL |     #[suggestion(no_crate_suggestion, code = "")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[suggestion(...)]` applied to `Vec` field is ambiguous
   = help: to show a suggestion consisting of multiple parts, use a `Subdiagnostic` annotated with `#[multipart_suggestion(...)]`
   = help: to show a variable set of suggestions, use a `Vec` of `Subdiagnostic`s annotated with `#[suggestion(...)]`

error: cannot find attribute `nonsense` in this scope
  --> $DIR/diagnostic-derive.rs:57:3
   |
LL | #[nonsense(no_crate_example, code = "E0123")]
   |   ^^^^^^^^

error: cannot find attribute `nonsense` in this scope
  --> $DIR/diagnostic-derive.rs:144:7
   |
LL |     #[nonsense]
   |       ^^^^^^^^

error: cannot find attribute `error` in this scope
  --> $DIR/diagnostic-derive.rs:577:3
   |
LL | #[error(no_crate_example, code = "E0123")]
   |   ^^^^^

error: cannot find attribute `warn_` in this scope
  --> $DIR/diagnostic-derive.rs:584:3
   |
LL | #[warn_(no_crate_example, code = "E0123")]
   |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`

error: cannot find attribute `lint` in this scope
  --> $DIR/diagnostic-derive.rs:591:3
   |
LL | #[lint(no_crate_example, code = "E0123")]
   |   ^^^^ help: a built-in attribute with a similar name exists: `link`

error: cannot find attribute `lint` in this scope
  --> $DIR/diagnostic-derive.rs:598:3
   |
LL | #[lint(no_crate_example, code = "E0123")]
   |   ^^^^ help: a built-in attribute with a similar name exists: `link`

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:639:3
   |
LL | #[multipart_suggestion(no_crate_suggestion)]
   |   ^^^^^^^^^^^^^^^^^^^^

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:642:3
   |
LL | #[multipart_suggestion()]
   |   ^^^^^^^^^^^^^^^^^^^^

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:646:7
   |
LL |     #[multipart_suggestion(no_crate_suggestion)]
   |       ^^^^^^^^^^^^^^^^^^^^

error[E0425]: cannot find value `nonsense` in module `crate::fluent_generated`
  --> $DIR/diagnostic-derive.rs:69:8
   |
LL | #[diag(nonsense, code = "E0123")]
   |        ^^^^^^^^ not found in `crate::fluent_generated`

error[E0425]: cannot find value `__code_34` in this scope
  --> $DIR/diagnostic-derive.rs:801:10
   |
LL | #[derive(Diagnostic)]
   |          ^^^^^^^^^^ not found in this scope
   |
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied
  --> $DIR/diagnostic-derive.rs:338:10
   |
LL | #[derive(Diagnostic)]
   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`
   |
   = help: normalized in stderr
note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`
  --> $COMPILER_DIR/crablangc_errors/src/diagnostic_builder.rs:LL:CC
   = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 84 previous errors

Some errors have detailed explanations: E0277, E0425.
For more information about an error, try `crablangc --explain E0277`.
