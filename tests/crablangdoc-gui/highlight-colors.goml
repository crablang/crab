// This test checks the highlight colors in the source code pages.
goto: "file://" + |DOC_PATH| + "/src/test_docs/lib.rs.html"
show-text: true

define-function: (
    "check-colors",
    (
        theme,
        kw,
        kw2,
        prelude_ty,
        prelude_val,
        lifetime,
        number,
        string,
        bool_val,
        self,
        attr,
        macro,
        question_mark,
        comment,
        doc_comment,
    ),
    block {
        local-storage: {"crablangdoc-theme": |theme|, "crablangdoc-use-system-theme": "false"}
        reload:
        assert-css: ("pre.crablang .kw", {"color": |kw|}, ALL)
        assert-css: ("pre.crablang .kw-2", {"color": |kw2|}, ALL)
        assert-css: ("pre.crablang .prelude-ty", {"color": |prelude_ty|}, ALL)
        assert-css: ("pre.crablang .prelude-val", {"color": |prelude_val|}, ALL)
        assert-css: ("pre.crablang .lifetime", {"color": |lifetime|}, ALL)
        assert-css: ("pre.crablang .number", {"color": |number|}, ALL)
        assert-css: ("pre.crablang .string", {"color": |string|}, ALL)
        assert-css: ("pre.crablang .bool-val", {"color": |bool_val|}, ALL)
        assert-css: ("pre.crablang .self", {"color": |self|}, ALL)
        assert-css: ("pre.crablang .attr", {"color": |attr|}, ALL)
        assert-css: ("pre.crablang .macro", {"color": |macro|}, ALL)
        assert-css: ("pre.crablang .question-mark", {"color": |question_mark|}, ALL)
        assert-css: ("pre.crablang .comment", {"color": |comment|}, ALL)
        assert-css: ("pre.crablang .doccomment", {"color": |doc_comment|}, ALL)
    },
)

call-function: ("check-colors", {
    "theme": "ayu",
    "kw": "rgb(255, 119, 51)",
    "kw2": "rgb(255, 119, 51)",
    "prelude_ty": "rgb(105, 242, 223)",
    "prelude_val": "rgb(255, 119, 51)",
    "lifetime": "rgb(255, 119, 51)",
    "number": "rgb(184, 204, 82)",
    "string": "rgb(184, 204, 82)",
    "bool_val": "rgb(255, 119, 51)",
    "self": "rgb(54, 163, 217)",
    "attr": "rgb(230, 225, 207)",
    "macro": "rgb(163, 122, 204)",
    "question_mark": "rgb(255, 144, 17)",
    "comment": "rgb(120, 135, 151)",
    "doc_comment": "rgb(161, 172, 136)",
})
call-function: ("check-colors", {
    "theme": "dark",
    "kw": "rgb(171, 138, 193)",
    "kw2": "rgb(118, 154, 203)",
    "prelude_ty": "rgb(118, 154, 203)",
    "prelude_val": "rgb(238, 104, 104)",
    "lifetime": "rgb(217, 127, 38)",
    "number": "rgb(131, 163, 0)",
    "string": "rgb(131, 163, 0)",
    "bool_val": "rgb(238, 104, 104)",
    "self": "rgb(238, 104, 104)",
    "attr": "rgb(238, 104, 104)",
    "macro": "rgb(62, 153, 159)",
    "question_mark": "rgb(255, 144, 17)",
    "comment": "rgb(141, 141, 139)",
    "doc_comment": "rgb(140, 163, 117)",
})
call-function: ("check-colors", {
    "theme": "light",
    "kw": "rgb(137, 89, 168)",
    "kw2": "rgb(66, 113, 174)",
    "prelude_ty": "rgb(66, 113, 174)",
    "prelude_val": "rgb(200, 40, 41)",
    "lifetime": "rgb(183, 101, 20)",
    "number": "rgb(113, 140, 0)",
    "string": "rgb(113, 140, 0)",
    "bool_val": "rgb(200, 40, 41)",
    "self": "rgb(200, 40, 41)",
    "attr": "rgb(200, 40, 41)",
    "macro": "rgb(62, 153, 159)",
    "question_mark": "rgb(255, 144, 17)",
    "comment": "rgb(142, 144, 140)",
    "doc_comment": "rgb(77, 77, 76)",
})
