- // MIR for `panics` before InstCombine
+ // MIR for `panics` after InstCombine
  
  fn panics() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +0:17
      let _1: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50
      let _2: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49
      let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62
  
      bb0: {
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50
-         _1 = assert_inhabited::<Never>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50
+         _1 = assert_inhabited::<Never>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50
                                           // mir::Constant
                                           // + span: $DIR/intrinsic_asserts.rs:17:5: 17:48
                                           // + literal: Const { ty: extern "crablang-intrinsic" fn() {assert_inhabited::<Never>}, val: Value(<ZST>) }
      }
  
      bb1: {
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49
-         _2 = assert_zero_valid::<&u8>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49
+         _2 = assert_zero_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49
                                           // mir::Constant
                                           // + span: $DIR/intrinsic_asserts.rs:18:5: 18:47
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: extern "crablang-intrinsic" fn() {assert_zero_valid::<&u8>}, val: Value(<ZST>) }
      }
  
      bb2: {
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62
-         _3 = assert_mem_uninitialized_valid::<&u8>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62
+         _3 = assert_mem_uninitialized_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62
                                           // mir::Constant
                                           // + span: $DIR/intrinsic_asserts.rs:19:5: 19:60
                                           // + user_ty: UserType(1)
                                           // + literal: Const { ty: extern "crablang-intrinsic" fn() {assert_mem_uninitialized_valid::<&u8>}, val: Value(<ZST>) }
      }
  
      bb3: {
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:62: +3:63
          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +4:2
          return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2
      }
  }
  
