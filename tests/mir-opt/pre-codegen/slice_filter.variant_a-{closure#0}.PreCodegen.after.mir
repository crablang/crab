// MIR for `variant_a::{closure#0}` after PreCodegen

fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2: &&(usize, usize, usize, usize)) -> bool {
    let mut _0: bool;
    let mut _3: &(usize, usize, usize, usize);
    let mut _4: &(usize, usize, usize, usize);
    let mut _5: &(usize, usize, usize, usize);
    let mut _6: &(usize, usize, usize, usize);
    let mut _9: bool;
    let mut _10: bool;
    let mut _13: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _20: bool;
    scope 1 {
        debug a => &((*_3).0: usize);
        debug b => &((*_4).1: usize);
        debug c => &((*_5).2: usize);
        debug d => &((*_6).3: usize);
        scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => &&((*_3).0: usize);
            debug other => &&((*_5).2: usize);
            scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => &((*_3).0: usize);
                debug other => &((*_5).2: usize);
                let mut _7: usize;
                let mut _8: usize;
            }
        }
        scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => &&((*_5).2: usize);
            debug other => &&((*_3).0: usize);
            scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => &((*_5).2: usize);
                debug other => &((*_3).0: usize);
                let mut _14: usize;
                let mut _15: usize;
            }
        }
        scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => &&((*_6).3: usize);
            debug other => &&((*_4).1: usize);
            scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => &((*_6).3: usize);
                debug other => &((*_4).1: usize);
                let mut _11: usize;
                let mut _12: usize;
            }
        }
        scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => &&((*_4).1: usize);
            debug other => &&((*_6).3: usize);
            scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => &((*_4).1: usize);
                debug other => &((*_6).3: usize);
                let mut _18: usize;
                let mut _19: usize;
            }
        }
    }

    bb0: {
        _3 = deref_copy (*_2);
        _4 = deref_copy (*_2);
        _5 = deref_copy (*_2);
        _6 = deref_copy (*_2);
        StorageLive(_10);
        StorageLive(_9);
        StorageLive(_7);
        _7 = ((*_3).0: usize);
        StorageLive(_8);
        _8 = ((*_5).2: usize);
        _9 = Le(move _7, move _8);
        StorageDead(_8);
        StorageDead(_7);
        switchInt(move _9) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = const false;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_13);
        StorageLive(_11);
        _11 = ((*_6).3: usize);
        StorageLive(_12);
        _12 = ((*_4).1: usize);
        _13 = Le(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        _10 = move _13;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_9);
        switchInt(move _10) -> [0: bb4, otherwise: bb8];
    }

    bb4: {
        StorageLive(_17);
        StorageLive(_16);
        StorageLive(_14);
        _14 = ((*_5).2: usize);
        StorageLive(_15);
        _15 = ((*_3).0: usize);
        _16 = Le(move _14, move _15);
        StorageDead(_15);
        StorageDead(_14);
        switchInt(move _16) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = const false;
        goto -> bb7;
    }

    bb6: {
        StorageLive(_20);
        StorageLive(_18);
        _18 = ((*_4).1: usize);
        StorageLive(_19);
        _19 = ((*_6).3: usize);
        _20 = Le(move _18, move _19);
        StorageDead(_19);
        StorageDead(_18);
        _17 = move _20;
        goto -> bb7;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_16);
        _0 = move _17;
        goto -> bb9;
    }

    bb8: {
        _0 = const true;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_10);
        return;
    }
}
