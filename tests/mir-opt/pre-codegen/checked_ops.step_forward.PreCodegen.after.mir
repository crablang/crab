// MIR for `step_forward` after PreCodegen

fn step_forward(_1: u32, _2: usize) -> u32 {
    debug x => _1;
    debug n => _2;
    let mut _0: u32;
    scope 1 (inlined <u32 as Step>::forward) {
        debug start => _1;
        debug n => _2;
        let _3: std::option::Option<u32>;
        let mut _6: bool;
        let mut _7: u32;
        scope 2 {
        }
        scope 3 (inlined Option::<u32>::is_none) {
            debug self => &_3;
            let mut _5: bool;
            scope 4 (inlined Option::<u32>::is_some) {
                debug self => &_3;
                let mut _4: isize;
            }
        }
        scope 5 (inlined core::num::<impl u32>::wrapping_add) {
            debug self => _1;
            debug rhs => _7;
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_3);
        _3 = <u32 as Step>::forward_checked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_5);
        _4 = discriminant(_3);
        _5 = Eq(_4, const 1_isize);
        _6 = Not(move _5);
        StorageDead(_5);
        StorageDead(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        assert(!const true, "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> [success: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = _2 as u32 (IntToInt);
        _0 = Add(_1, _7);
        StorageDead(_7);
        return;
    }
}
