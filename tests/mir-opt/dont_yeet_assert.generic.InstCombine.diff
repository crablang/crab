- // MIR for `generic` before InstCombine
+ // MIR for `generic` after InstCombine
  
  fn generic() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +0:21
      let _1: ();                          // in scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61
          _1 = assert_mem_uninitialized_valid::<&T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61
                                           // mir::Constant
                                           // + span: $DIR/dont_yeet_assert.rs:10:5: 10:59
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: extern "crablang-intrinsic" fn() {assert_mem_uninitialized_valid::<&T>}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:61: +1:62
          _0 = const ();                   // scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +2:2
          return;                          // scope 0 at $DIR/dont_yeet_assert.rs:+2:2: +2:2
      }
  }
  
