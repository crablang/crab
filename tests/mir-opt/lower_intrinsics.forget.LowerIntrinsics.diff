- // MIR for `forget` before LowerIntrinsics
+ // MIR for `forget` after LowerIntrinsics
  
  fn forget(_1: T) -> () {
      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:18: +0:19
      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:24: +0:24
      let mut _2: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31
          _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31
-         _0 = std::intrinsics::forget::<T>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32
-                                          // mir::Constant
-                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29
-                                          // + literal: Const { ty: extern "crablang-intrinsic" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }
+         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32
+         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:31: +1:32
          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:1: +2:2
      }
  
      bb2: {
          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2
      }
  }
  
