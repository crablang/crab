- // MIR for `bar` before RevealAll
+ // MIR for `bar` after RevealAll
  
  fn bar(_1: P) -> () {
      debug _baz => _1;                    // in scope 0 at $DIR/issue_78442.rs:+2:5: +2:9
      let mut _0: ();                      // return place in scope 0 at $DIR/issue_78442.rs:+3:3: +3:3
      let _2: ();                          // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
-     let mut _3: &impl Fn();              // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
-     let _4: impl Fn();                   // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
+     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
+     let _4: fn() {foo};                  // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
      let mut _5: ();                      // in scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
          StorageLive(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
          StorageLive(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
          _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
                                           // mir::Constant
                                           // + span: $DIR/issue_78442.rs:11:5: 11:13
                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(<ZST>) }
      }
  
      bb1: {
          _3 = &_4;                        // scope 0 at $DIR/issue_78442.rs:+4:5: +4:15
          StorageLive(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
          _5 = ();                         // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
+         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue_78442.rs:+4:5: +4:17
                                           // mir::Constant
                                           // + span: $DIR/issue_78442.rs:11:5: 11:15
-                                          // + literal: Const { ty: for<'a> extern "crablang-call" fn(&'a impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a> extern "crablang-call" fn(&'a fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(<ZST>) }
      }
  
      bb2: {
          StorageDead(_5);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17
          StorageDead(_3);                 // scope 0 at $DIR/issue_78442.rs:+4:16: +4:17
          StorageDead(_4);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18
          StorageDead(_2);                 // scope 0 at $DIR/issue_78442.rs:+4:17: +4:18
          _0 = const ();                   // scope 0 at $DIR/issue_78442.rs:+3:3: +5:2
          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2
      }
  
      bb3: {
          return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2
      }
  
      bb4 (cleanup): {
          drop(_1) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2
      }
  
      bb5 (cleanup): {
          resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2
      }
  }
  
