[workspace]
members = [
  "compiler/crablangc",
  "library/std",
  "library/test",
  "src/crablangdoc-json-types",
  "src/tools/build_helper",
  "src/tools/cargotest",
  "src/tools/clippy",
  "src/tools/clippy/clippy_dev",
  "src/tools/compiletest",
  "src/tools/error_index_generator",
  "src/tools/linkchecker",
  "src/tools/lint-docs",
  "src/tools/miropt-test-tools",
  "src/tools/crablangbook",
  "src/tools/unstable-book-gen",
  "src/tools/tidy",
  "src/tools/tier-check",
  "src/tools/build-manifest",
  "src/tools/remote-test-client",
  "src/tools/remote-test-server",
  "src/tools/crablang-installer",
  "src/tools/crablang-demangler",
  "src/tools/cargo",
  "src/tools/cargo/crates/credential/cargo-credential-1password",
  "src/tools/cargo/crates/credential/cargo-credential-macos-keychain",
  "src/tools/cargo/crates/credential/cargo-credential-wincred",
  "src/tools/cargo/crates/mdman",
  # "src/tools/cargo/crates/resolver-tests",
  "src/tools/crablangdoc",
  "src/tools/rls",
  "src/tools/crablangfmt",
  "src/tools/miri",
  "src/tools/miri/cargo-miri",
  "src/tools/crablangdoc-themes",
  "src/tools/unicode-table-generator",
  "src/tools/expand-yaml-anchors",
  "src/tools/jsondocck",
  "src/tools/jsondoclint",
  "src/tools/html-checker",
  "src/tools/bump-stage0",
  "src/tools/replace-version-placeholder",
  "src/tools/lld-wrapper",
  "src/tools/collect-license-metadata",
  "src/tools/generate-copyright",
]

exclude = [
  "build",
  "compiler/crablangc_codegen_cranelift",
  "compiler/crablangc_codegen_gcc",
  "src/bootstrap",
  "tests/crablangdoc-gui",
  # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.
  "obj",
  # The `x` binary is a thin wrapper that calls `x.py`, which initializes
  # submodules, before which workspace members cannot be invoked because
  # not all `Cargo.toml` files are available, so we exclude the `x` binary,
  # so it can be invoked before the current checkout is set up.
  "src/tools/x",
  # stdarch has its own Cargo workspace
  "library/stdarch",
]

[profile.release.package.compiler_builtins]
# The compiler-builtins crate cannot reference libcore, and it's own CI will
# verify that this is the case. This requires, however, that the crate is built
# without overflow checks and debug assertions. Forcefully disable debug
# assertions and overflow checks here which should ensure that even if these
# assertions are enabled for libstd we won't enable them for compiler_builtins
# which should ensure we still link everything correctly.
debug-assertions = false
overflow-checks = false

# For compiler-builtins we always use a high number of codegen units.
# The goal here is to place every single intrinsic into its own object
# file to avoid symbol clashes with the system libgcc if possible. Note
# that this number doesn't actually produce this many object files, we
# just don't create more than this number of object files.
#
# It's a bit of a bummer that we have to pass this here, unfortunately.
# Ideally this would be specified through an env var to Cargo so Cargo
# knows how many CGUs are for this specific crate, but for now
# per-crate configuration isn't specifiable in the environment.
codegen-units = 10000

[profile.release.package.crablangc-rayon-core]
# The crablangc fork of Rayon has deadlock detection code which intermittently
# causes overflows in the CI (see https://github.com/crablang/crablang/issues/90227)
# so we turn overflow checks off for now.
# FIXME: This workaround should be removed once #90227 is fixed.
overflow-checks = false

# These dependencies of the standard library implement symbolication for
# backtraces on most platforms. Their debuginfo causes both linking to be slower
# (more data to chew through) and binaries to be larger without really all that
# much benefit. This section turns them all to down to have no debuginfo which
# helps to improve link times a little bit.
[profile.release.package]
addr2line.debug = 0
adler.debug = 0
gimli.debug = 0
miniz_oxide.debug = 0
object.debug = 0

[patch.crates-io]
# See comments in `src/tools/crablangc-workspace-hack/README.md` for what's going on
# here
crablangc-workspace-hack = { path = 'src/tools/crablangc-workspace-hack' }

# See comments in `library/crablangc-std-workspace-core/README.md` for what's going on
# here
crablangc-std-workspace-core = { path = 'library/crablangc-std-workspace-core' }
crablangc-std-workspace-alloc = { path = 'library/crablangc-std-workspace-alloc' }
crablangc-std-workspace-std = { path = 'library/crablangc-std-workspace-std' }

[patch."https://github.com/crablang/crablang-clippy"]
clippy_lints = { path = "src/tools/clippy/clippy_lints" }
